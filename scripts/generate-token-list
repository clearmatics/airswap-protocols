#!/usr/bin/env node

const util = require('node:util')
const _exec = util.promisify(require('node:child_process').exec)

const ntnLogoURI =
  'https://piccadilly.autonity.org/assets/network_icon_dark.svg'
const usdcLogoURI =
  'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png'

async function exec(cmd) {
  return (await _exec(cmd)).stdout.trim()
}

async function main() {
  if (process.argv.length < 4) {
    console.error(`Usage: ${__filename} <genesis-file> <usdc-token-address>`)
    process.exit(1)
  }

  const genesis = require(process.argv[2])

  const ntnAddress = await exec(`aut protocol contract-address`)
  const usdcAddress = process.argv[3]
  const validatorAddresses = genesis.config.autonity.validators.map(
    (validator) => validator.nodeAddress
  )

  const [ntnSymbol, ntnDecimals, usdcSymbol, usdcDecimals] = await Promise.all([
    exec('aut token symbol --ntn'),
    exec('aut token decimals --ntn').then((stdout) => parseInt(stdout)),
    exec(`aut token symbol --token ${usdcAddress}`),
    exec(`aut token decimals --token ${usdcAddress}`).then((stdout) =>
      parseInt(stdout)
    ),
  ])

  const validators = await Promise.all(
    validatorAddresses.map(async (addr) => {
      const validator = JSON.parse(
        await exec(`aut validator info --validator ${addr}`)
      )

      validator.token_symbol = await exec(
        `aut token symbol --token ${validator.liquid_contract}`
      )

      validator.token_decimals = parseInt(
        await exec(`aut token decimals --token ${validator.liquid_contract}`)
      )

      return validator
    })
  )

  const tokenlist = {
    tokens: [
      {
        address: ntnAddress,
        name: 'Newton',
        symbol: ntnSymbol,
        decimals: ntnDecimals,
        chainId: genesis.config.chainId,
        logoURI: ntnLogoURI,
      },
      {
        address: usdcAddress,
        name: 'USD Coin',
        symbol: usdcSymbol,
        decimals: usdcDecimals,
        chainId: genesis.config.chainId,
        logoURI: usdcLogoURI,
      },
      ...validators.map((validator) => ({
        address: validator.liquid_contract,
        name: `Liquid Newton for validator ${validator.node_address}`,
        symbol: validator.token_symbol,
        decimals: validator.token_decimals,
        chainId: genesis.config.chainId,
        logoURI: ntnLogoURI,
      })),
    ],
  }

  console.log(JSON.stringify(tokenlist))
}

main()
