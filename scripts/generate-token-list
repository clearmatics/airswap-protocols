#!/usr/bin/env node

const fs = require('node:fs/promises')
const util = require('node:util')
const _exec = util.promisify(require('node:child_process').exec)

const ntnLogoURI =
  'https://piccadilly.autonity.org/assets/network_icon_dark.svg'
const usdcLogoURI =
  'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png'

const watnAddress = '0xcE17e51cE4F0417A1aB31a3c5d6831ff3BbFa1d2'
const usdcAddress = '0x3a60C03a86eEAe30501ce1af04a6C04Cf0188700'
const chainId = 65100003

const validatorAddresses = [
  '0x551f3300FCFE0e392178b3542c009948008B2a9F',
  '0xB12326F310FfB24dE8c5d71d14aBfB4561c72A59',
  '0xD7798De146484a297472c6B863e69426AAc2a23E',
  '0x27877A754b3032D3EA592BF28dF4f58Fd9348275',
  '0x94d28f08Ff81A80f4716C0a8EfC6CAC2Ec74d09E',
  '0x9791755CcCABCda07e190793087BD650279f6e1f',
  '0x96bCa10D74D0439c6BAfE187C2397155c8C2F3e2',
  '0x383A3c437d3F12f60E5fC990119468D3561EfBfc',
  '0x7681161D3dE29F330ED16aa7c60cEC1edD46FcAa',
  '0x7CC5E4687ECB172B21a56E202e7E88950DE98B66',
  '0x94470A842Ea4f44e668EB9C2AB81367b6Ce01772',
  '0x730D692f8b6af479f647891542f2aA5114924694',
  '0xDf6D6729f2E972222F77CeA91e5F2C4613cF241A',
  '0xd61a48b0e11B0Dc6b7Bd713B1012563c52591BAA',
  '0xDCA5DFF3D42f2db3C18dBE823380A0A81db49A7E',
  '0x100E38f7BCEc53937BDd79ADE46F34362470577B',
  '0x41c005f62d8511262f1801265737587503451017',
  '0xE4686A4C6E63A8ab51B458c52EB779AEcf0B74f7',
  '0xf2b6DC122206398025D5b299b5a28Cb91b557B85',
  '0xf6709934bADDDf7Dd79eED134A875984597E8148',
  '0x1Be7f70BCf8393a7e4A5BcC66F6f15d6e35cfBBC',
  '0xFf02373228e1133Da0a16340350532b813f463Dc',
  '0x9d28e40E9Ec4789f9A0D17e421F76D8D0868EA44',
  '0x725fC5416BDb173642D21DfC401519B0DCBf7f3b',
  '0x71867c487b801f3328B4e1af2D2bE2e8358000Ee',
  '0x99E2B4B27BDe92b42D04B6CF302cF564D2C13b74',
  '0x527192F3D2408C84087607b7feE1d0f907821E17',
  '0xdA699B797D901Dec38C422614caAa440AB4aA846',
]

async function exec(cmd) {
  return (await _exec(cmd)).stdout.trim()
}

async function main() {
  const ntnAddress = await exec(`aut protocol contract-address`)

  const [
    ntnSymbol,
    ntnDecimals,
    usdcSymbol,
    usdcDecimals,
    watnSymbol,
    watnDecimals,
  ] = await Promise.all([
    exec('aut token symbol --ntn'),
    exec('aut token decimals --ntn').then((stdout) => parseInt(stdout)),
    exec(`aut token symbol --token ${usdcAddress}`),
    exec(`aut token decimals --token ${usdcAddress}`).then((stdout) =>
      parseInt(stdout)
    ),
    exec(`aut token symbol --token ${watnAddress}`),
    exec(`aut token decimals --token ${watnAddress}`).then((stdout) =>
      parseInt(stdout)
    ),
  ])

  const validators = await Promise.all(
    validatorAddresses.map(async (addr) => {
      const validator = JSON.parse(
        await exec(`aut validator info --validator ${addr}`)
      )

      validator.token_symbol = await exec(
        `aut token symbol --token ${validator.liquid_contract}`
      )

      validator.token_decimals = parseInt(
        await exec(`aut token decimals --token ${validator.liquid_contract}`)
      )

      return validator
    })
  )

  const tokenlist = {
    tokens: [
      {
        address: ntnAddress,
        name: 'Newton',
        symbol: ntnSymbol,
        decimals: ntnDecimals,
        chainId: chainId,
        logoURI: ntnLogoURI,
      },
      {
        address: watnAddress,
        name: 'Wrapped Auton',
        symbol: watnSymbol,
        decimals: watnDecimals,
        chainId: chainId,
        logoURI: ntnLogoURI,
      },
      {
        address: usdcAddress,
        name: 'Mock USD Coin',
        symbol: usdcSymbol,
        decimals: usdcDecimals,
        chainId: chainId,
        logoURI: usdcLogoURI,
      },
      ...validators.map((validator) => ({
        address: validator.liquid_contract,
        name: `Liquid Newton for validator ${validator.node_address}`,
        symbol: validator.token_symbol,
        decimals: validator.token_decimals,
        chainId: chainId,
        logoURI: ntnLogoURI,
      })),
    ],
  }

  await fs.writeFile(
    `${__dirname}/../tokenlists/tokenlist-${chainId}.json`,
    JSON.stringify(tokenlist)
  )
}

main()
